#!/usr/bin/env python

import rospy
from std_msgs.msg import Int16, Int32

readings_cut = [0, 0, 0]
previous_changed = False

offset = rospy.get_param('filter/offset')

# RATE = rospy.get_param('ultrasonic/rate')
pub = rospy.Publisher('ultrasonic_distance', Int16, queue_size=10)

def start():
	rospy.init_node('process_ultrasonic', anonymous=True)
	rospy.Subscriber('ultrasonic_raw', Int16, process_ultrasonic)
	rospy.spin()

def process_ultrasonic(data):
	dist_curr = data.data
	# delete the oldest value
	pop = readings_cut.pop(0)
	# filter current reading
	cut_value = cut_crazy_values(readings_cut, dist_curr)
	# update the list with the new cut reading
	readings_cut.append(cut_value)
	# delete the oldest value
	pop = readings_cut.pop(0)
	# apply median filter

	# publish
	pub.publish(dist_curr)

def median(lst):
	n = len(lst)
	if n < 3:
		return None
	else:
		for i in range(len(lst)):
			lst_3 = [lst[-i-1], lst[-i-2], lst[-i-3]]

			return sorted(lst_3)[1] 

def cut_crazy_values(data, new_reading):
	"""
    If the difference between current and previous value is larger than offset,
    the previous one. If the previous value was replaced, it returns the current value.
    """
    previous_reading = data[-1]
	if (abs(new_reading - previous_reading)) > offset:
		if previous_changed == False:
			previousChanged = True
			return previous_reading
		else:
			previousChanged = False
			return new_reading
	return new_reading

if __name__ == '__main__':
	start()