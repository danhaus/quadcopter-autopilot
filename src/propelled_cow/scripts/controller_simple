#!/usr/bin/env python

import rospy
import time
from std_msgs.msg import Int16, Int32

import propelled_cow.PID_control as _PID


class Controller(object):
	"""docstring for Controller"""
	def __init__(self):
		self.distance_demand = rospy.get_param('distance_treshold')
		self.PID_vals = rospy.get_param('distance')
		self.controller = _PID.PID(self.PID_vals['Kp'], self.PID_vals['Ki'], self.PID_vals['Kd'], 0, 1000) # THE LAST TWO VALUES NEEDS TO BE ADJUSTED
		self.throttle_pub = rospy.Publisher('PWM_throttle', Int16, queue_size=10)
		self.servo_pub = rospy.Publisher('servo_angle', Int16, queue_size=10)
		rospy.init_node('controller', anonymous=True)
		self.PWM_limits = rospy.get_param('PWM')
		self.PWM_current = 1000 # us

		time.sleep(5) # wait 5 seconds before starting the flight

		rospy.Subscriber('ultrasonic_distance', Int16, self.process_ultrasonic_distance)
		rospy.spin() # IT MIGHT NOT NEED TO BE HERE

	def process_ultrasonic_distance(self, data):
		self.distance = data.data
		err = self.distance_demand - self.distance
		PWM_correction = -self.controller.update_PID(err)
		PWM_raw = self.PWM_current + PWM_correction
		self.PWM_current = _PID.saturation(PWM_raw, self.PWM_limits['min'], self.PWM_limits['max'])
		self.throttle_pub.publish(self.PWM_current)

		if self.distance >= self.distance_demand:
			self.servo_pub.publish(180)

if __name__ == '__main__':
	controller = Controller()
