#!/usr/bin/env python

import rospy
from std_msgs.msg import Int16, Int32
from statistics import median

alpha = 0.3 # constant for exponential filter

readings_cut = [0, 0, 0]
last_published = 0
previous_changed = False
offset = rospy.get_param('filter/offset')

# RATE = rospy.get_param('ultrasonic/rate')
pub = rospy.Publisher('sonar_distance', Int16, queue_size=10)

def start():
	

	rospy.init_node('process_sonar', anonymous=True)
	rospy.Subscriber('sonar_raw', Int16, process_ultrasonic)
	rospy.spin()

def process_ultrasonic(data):
	dist_curr = data.data

	# delete the oldest value
	pop = readings_cut.pop(0)

	# update the list with the new cut reading
	readings_cut.append(dist_curr)

	# apply median filter to cut off extreme values
	median_value = median(readings_cut)

	# apply exponential filter to smooth the reading
	filtered_value = alpha*median_value + (1-alpha)*last_published

	# publish
	pub.publish(filtered_value)

	# save published value for the exponential filter
	last_published = filtered_value


def cut_crazy_values(data, new_reading):
	"""
    If the difference between current and previous value is larger than offset,
    the previous one. If the previous value was replaced, it returns the current value.
    """
	previous_reading = data[-1]
	if (abs(new_reading - previous_reading)) > offset:
		if previous_changed == False:
			previous_changed = True
			return previous_reading
		else:
			previous_changed = False
			return new_reading
	return new_reading

if __name__ == '__main__':
	start()