#!/usr/bin/env python

import rospy
import time
from std_msgs.msg import Int16, Int32

import propelled_cow.PID_control as _PID


class Controller(object):
	"""docstring for Controller"""
	def __init__(self):
		self.distance_demand = rospy.get_param('distance_treshold')
		self.throttle_pub = rospy.Publisher('PWM_throttle', Int16, queue_size=2)
		self.servo_pub = rospy.Publisher('servo_angle', Int16, queue_size=10)

		self.altitude = 0
		self.votes_count_drop = 0
		self.bag_is_dropped = False

		rospy.init_node('controller', anonymous=True)
		rospy.Subscriber('distance_fused', Int16, self.main_control)
		rospy.spin()

	def drop_bag(self):
	# Returns True when it is within 100 mm error from the required altitude for 50 subsequent iterations.
	if abs(self.altitude > self.distance_demand - 100):
		self.votes_count_drop += 1
		rospy.loginfo("votes_count_drop: " + str(self.votes_count_drop))
		# if (time.time() - self.start > 30):
		# 	rospy.loginfo("Drop bean bag timed out. Opening servo.")
		# 	return True
		if (self.votes_count_drop >= 50):
			return True
	else:
		self.votes_count_drop = 0
		return False

	def main_control(self, data):
		self.altitude = data.data
		if (not self.bag_is_dropped):
			if(self.drop_bag()):
				self.servo_pub.publish(170)
				rospy.loginfo("Bean bag dropped.")
				self.bag_is_dropped = True

if __name__ == '__main__':
	controller = Controller()
